<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="component.school.SchoolMapper">

    <!-- 탐험단 - 나의 정보 -->
    <resultMap id="schoolExplorerMyInfo" type="component.school.explorer.vo.SchoolExplorerMyInfo">
        <result property="totalNum" column="total_num"/>
        <result property="myAttendanceNum" column="my_attendance_num"/>
        <result property="allAmount" column="all_amount"/>
        <result property="myPayment" column="my_payment"/>
        <result property="memberPoint" column="member_point"/>
        <result property="setDay" column="set_day"/>
        <result property="dust" column="dust"/>
    </resultMap>
    <!-- 탐험단 - 평균 출석률 -->
    <resultMap id="schoolClassAvgAttendanceRateVO" type="component.school.explorer.vo.SchoolClassAvgAttendanceRateVO">
        <result property="authMembers" column="auth_members"/>
        <result property="rate" column="rate"/>
    </resultMap>
    <!-- 탐험단 - 출석유저 리스트 -->
    <resultMap id="schoolExplorerAttendanceListVO" type="component.school.explorer.vo.SchoolExplorerAttendanceListVO">
        <result property="nickname" column="nickname"/>
        <result property="logId" column="log_id"/>
        <result property="num" column="num"/>
        <result property="image" column="image"/>
    </resultMap>
    <!-- 탐험단 - 상금 -->
    <resultMap id="schoolRewardVO" type="component.school.explorer.vo.SchoolRewardVO">
        <result property="schoolId" column="school_id"/>
        <result property="allAccPayment" column="all_acc_payment"/>
        <result property="allDailyPayment" column="all_daily_payment"/>
        <result property="specialAccPayment" column="special_acc_payment"/>
        <result property="specialDailyPayment" column="special_daily_payment"/>
        <result property="allAvgAttendance" column="all_avg_attendance"/>
        <result property="allAccAttendance" column="all_acc_attendance"/>
        <result property="specialAccAttendance" column="special_acc_attendance"/>
        <result property="specialAvgAttendance" column="special_avg_attendance"/>
        <result property="allTodayAmount" column="all_today_amount"/>
        <result property="specialTodayAmount" column="special_today_amount"/>
    </resultMap>
    <!-- get member device token -->
    <resultMap id="memberDeviceVO" type="component.member.vo.MemberDeviceVO">
        <result property="memberEmail" column="member_email"/>
        <result property="deviceType" column="device_type"/>
        <result property="deviceToken" column="device_token"/>
        <result property="schoolName" column="school_name"/>
    </resultMap>

    <!-- class vo -->
    <resultMap id="classVO" type="component.school.vo.ClassVO">
        <result property="classId" column="class_id"/>
        <result property="authTime" column="auth_time"/>
        <result property="allMembers" column="all_members"/>
        <result property="authMembers" column="auth_members"/>
    </resultMap>

    <!-- school hashtag -->
    <resultMap id="hashTags" type="component.school.vo.SchoolHashTags">
        <result property="hashtagsId" column="hashtags_id"/>
        <result property="hashTag" column="hashtags"/>
    </resultMap>

    <!-- school vo -->
    <resultMap id="schoolVO" type="component.school.vo.SchoolVO">
        <result property="schoolId" column="school_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="schoolType" column="school_type"/>
        <result property="memberEmail" column="member_email"/>
        <result property="schoolName" column="school_name"/>
        <result property="setLocation" column="set_location"/>
        <result property="oneLineMessage" column="one_line_message"/>
        <result property="imagePath" column="image_path"/>
        <result property="cumulativeAmount" column="cumulative_amount"/>
        <result property="sumPerson" column="sum_person"/>
        <result property="todayPerson" column="todayPerson"/>
        <result property="period" column="period"/>
        <result property="days" column="days"/>
        <collection property="hashTags" resultMap="hashTags"/>
    </resultMap>

    <!-- 학교정보 가져오기 -->
    <select id="getSchools" parameterType="int" resultMap="schoolVO">
        select s.*,datediff(date_format(now(),'%Y-%m-%d'),date_format(found_date,'%Y-%m-%d')) as days,
        reservation_num.today_person,hashtag.hashtags_id,hashtag.hashtags,
        acc_attendance.sum_person
        from school as s left outer join
        (select * from
        (select school_id,count(*) as today_person
        from class_members
        where (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (set_day <![CDATA[&]]> #{weekday} !=
        0)
        group by school_id) as
        tmp) as reservation_num on s.school_id = reservation_num.school_id
        left outer join school_hashtags as hashtag on s.school_id = hashtag.school_id
        left outer join
        (select * from
        (select school_id,count(*) as sum_person from class_auth_log group by school_id) as tmp) as acc_attendance on
        s.school_id = acc_attendance.school_id
        <if test="categoryId != 0">
            where category_id = #{categoryId};
        </if>
    </select>

    <select id="getSchoolsByPlanetCode" parameterType="string" resultMap="schoolVO">
         select tmp.category_id,tmp.school_id,tmp.school_name,tmp.set_location,tmp.one_line_message,tmp.image_path
        ,tmp.all_members,tttmp.sum_person,tttmp.avg_person,tmp.cumulative_amount,h.hashtags_id,h.hashtags
        from
        (select s.category_id,s.school_id,s.school_name,s.set_location,s.one_line_message,
        s.image_path,s.cumulative_amount,count(s.school_id) as all_members
        From school as s
        left outer join class_members as c on c.school_id = s.school_id group by s.school_id) as tmp -- 학교, 총 재학인원
        left outer join school_hashtags as h on h.school_id = tmp.school_id
        left outer join
        (select school_id,sum(cnt) as sum_person, avg(cnt) as avg_person from (select *,count(*) as cnt from class_auth_log
        group by date_format(auth_date,'%Y-%m-%d') order by school_id) as ttmp group by school_id) as tttmp
        on tmp.school_id = tttmp.school_id-- 해시태그
        where tmp.set_location = #{planetCode}
    </select>
    <!-- mysql 8.0 version 이상부터 -->
    <!--    select school_id,sum(cnt), avg(cnt),dense_rank() over(order by sum(cnt) desc, log_id asc) as acc_rank, dense_rank() over(order by avg(cnt) desc, log_id asc) as avg_rank-->
    <!--    from (select *,count(*) as cnt from class_auth_log group by date_format(auth_date,'%Y-%m-%d') order by school_id) as ttmp group by school_id;-->
    <insert id="registerSchool" parameterType="SchoolDTO">
        INSERT INTO school(category_id,member_email,school_name,set_location,one_line_message) values
        (#{categoryId},#{memberEmail},#{schoolName},#{setLocation},#{oneLineMessage})

        <selectKey keyProperty="schoolId" resultType="Integer" order="AFTER">
            SELECT LAST_INSERT_ID();
        </selectKey>

    </insert>

    <select id="getClasses" parameterType="hashmap" resultMap="classVO">
        select tmp.class_id,tmp.all_members,auth_table.auth_members from
        (select * ,count(*) as all_members from
        (select *  from class_members as c where school_id = #{schoolId} and date_format(#{selectedDate},'%Y-%m-%d')
        between start_date and end_date and set_day <![CDATA[&]]> #{weekday} != 0) as ttmp -- 선택한 날짜, 유저의 요일에 맞게 가져옴
        group by class_id) as tmp -- 경찰학교 클릭했을떄, class_id 별로 총 학생 수
        left outer join ( -- 오늘 출석한 유저의 총 숫자
        select school_id,class_id,count(*) as auth_members from class_auth_log
        where date_format(auth_date,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d') group by school_id,class_id) as auth_table
        on auth_table.school_id = tmp.school_id and auth_table.class_id = tmp.class_id;

    </select>

    <insert id="saveHashTag" parameterType="hashmap">
        INSERT INTO school_hashtags(school_id,hashtags) values
        <foreach collection="list" item="item" separator="," index="idx">
            (#{schoolId},#{item})
        </foreach>
    </insert>

    <insert id="saveSearchKeyword" parameterType="java.util.Map">
        INSERT INTO school_search_log (search_keyword,num) values
        <foreach collection="list" item="item" separator=",">
            (#{item.searchKeyword},#{item.num})
        </foreach>
    </insert>

    <select id="getSchoolsBySearch" parameterType="string" resultMap="schoolVO">
     select s.school_id,s.category_id,s.member_email,s.school_name,s.one_line_message,s.image_path,
     p.planet_name,h.hashtags,amis.all_members_in_school
     from school as s left outer join planet as p
     on s.set_location = p.planet_code left outer join school_hashtags as h on s.school_id = h.school_id
     left outer join
     (select c.school_id,sum(tmp.all_members) as all_members_in_school from class as c left outer join
     (select *,ifnull(count(class_id),0) as all_members from class_members where date_format(now(),'%Y-%m-%d')
     between start_date and end_date group by class_id) as tmp
	 on  c.class_id = tmp.class_id group by school_id) as amis on amis.school_id = s.school_id
     where category_id = #{categoryId} and s.school_name like concat('%',#{keyword},'%');
    </select>

    <insert id="registerClass" parameterType="ClassDTO">
        INSERT INTO class (school_id,weekday_type,auth_time) values
         (#{schoolId},#{weekdayType},time_format(#{authTime},'%H:%i:%s'))
    </insert>

    <insert id="joinClassInOfficial" parameterType="ClassJoinDTO">
        insert into class_members
        (select null,#{schoolId},#{classId},#{setDay},#{memberEmail},
        #{startDate},#{endDate},#{setPaymentAmount} from dual
        where (select count(*) from class_members where member_email = #{memberEmail}) = 0);
    </insert>

    <insert id="joinClassInNonOfficial" parameterType="ClassJoinDTO">
        insert into class_members
        (select null,#{schoolId},#{classId},#{setDay},#{memberEmail},
        #{startDate},#{endDate},#{setPaymentAmount} from dual
        where (select count(*) from class_members where school_id = #{schoolId}) = 0);
    </insert>
    <select id="getDevicesForPushNotificationOfAttendance" parameterType="int" resultMap="memberDeviceVO">
        select *,(
        select school_name from class_members as c left outer join school as s on c.school_id = s.school_id where c.member_email = m.member_email) as school_name
        from member_device as m
        where member_email in(
        select member_email from
        (select * from class_members where (date_format(now(),'%Y-%m-%d') between start_date and end_date)
        and set_day <![CDATA[&]]> #{weekday} != 0) as tmp -- 오늘 출석체크 해야하는 유저 조회
        left outer join class as c on c.class_id = tmp.class_id -- 클래스 고유정보 조회
        where time_format(now(),'%H:%i:%s') <![CDATA[<=]]> auth_time and -- 출석할 시간인지 ??
        time_format(date_add(now(), INTERVAL 1 HOUR),'%H:%i:%s') <![CDATA[>=]]> auth_time)
    </select>

    <insert id="classAuth" parameterType="ClassAuthDTO">
        INSERT INTO class_auth_log values (null,#{schoolId},#{classId},#{planetCode},#{memberEmail},now())
    </insert>

    <select id="getExplorerReward" resultMap="schoolRewardVO" parameterType="int">
        select tmp1.*,tmp2.special_acc_payment,tmp2.special_daily_payment,tmp3.all_avg_attendance,tmp3.all_acc_attendance,tmp4.special_avg_attendance,
      tmp4.special_acc_attendance,tmp5.all_today_amount,tmp6.special_today_amount from(
      select #{schoolId} as school_id, sum(daily_total_payment) as all_acc_payment,truncate((sum(daily_total_payment)/sum(daily_cnt_person)),0) as all_daily_payment
      From school_class_daily_payment where class_id = #{classId}) as tmp1
      left outer join -- 모든갤럭시 누적보증금, 모든갤럭시 하루평균 보증금
      (select school_id,sum(daily_total_payment) as special_acc_payment,truncate((sum(daily_total_payment)/sum(daily_cnt_person)),0) as special_daily_payment
      from school_class_daily_payment where school_id = #{schoolId} and class_id = #{classId}) as tmp2 on tmp1.school_id = tmp2.school_id
      left outer join -- 특정학교 누적보증금, 특정갤럭시 하루 평균 보증금
      (select #{schoolId} as school_id,ifnull(truncate(sum(auth_members)/sum(all_members),2),0) as all_avg_attendance ,sum(auth_members) as all_acc_attendance
      from school_daily_attendance_rate where class_id = #{classId}) as tmp3 on tmp1.school_id = tmp3.school_id
      left outer join -- 모든 갤럭시의 평균 출석율, 평균 출석인원
	  (select school_id,ifnull(truncate(sum(auth_members) / sum(all_members),2),0) as special_avg_attendance ,sum(auth_members) as special_acc_attendance
       from school_daily_attendance_rate where school_id = #{schoolId} and class_id = #{classId}) as tmp4 on tmp1.school_id = tmp4.school_id
       left outer join -- 특정학교, 특정 갤럭시 평균 출석율, 평균 출석인원
      (select #{schoolId} as school_id,sum(set_payment_amount) as all_today_amount
       from class_members
       where (date_format(now(),'%Y-%m-%d') between start_date and end_date)
       and (set_day <![CDATA[&]]> #{weekday} != 0)
       and (class_id = #{classId})) as tmp5 on tmp1.school_id = tmp5.school_id
       left outer join
      (select school_id,sum(set_payment_amount) as special_today_amount
       from class_members where school_id = #{schoolId} and (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (set_day <![CDATA[&]]> #{weekday} != 0)
      and (class_id = #{classId} and school_id = #{schoolId})) as tmp6 on tmp1.school_id = tmp6.school_id
    </select>

    <select id="getAttendanceList" resultMap="schoolExplorerAttendanceListVO" parameterType="SchoolExplorerDTO">
    select nickname,log_id,num,image from (
    select tmp1.member_email,ifnull(tmp2.log_id,0) as log_id,tmp3.num,
    (select if(log_id is null,not_att_image,att_image)
    from members_image as i where tmp1.member_email = i.member_email) as image
    from (
    select * from class_members where school_id = #{schoolId} and class_id = #{classId} and
    (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (set_day <![CDATA[&]]> #{weekday} != 0)) as tmp1
    left outer join
    (select * from class_auth_log where school_id = #{schoolId} and class_id = #{classId} and
    date_format(auth_date,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')) as tmp2
    on tmp1.member_email = tmp2.member_email -- 출석한 사람과 안한사람.
    left outer join
    (select member_email,count(*) as num From class_auth_log where school_id = #{schoolId} and class_id = #{classId}
    group by member_email) as tmp3 -- 특정 갤럭시, 특정 시간대의 사람들의 출석회수
    on tmp1.member_email = tmp3.member_email) as tmp left outer join members as m on tmp.member_email = m.email;
    </select>

    <select id="getAttendanceRate" parameterType="int" resultMap="schoolClassAvgAttendanceRateVO">
    select auth_members,truncate(auth_members/all_members,3) as rate
    from school_daily_attendance_rate
    where school_id = #{schoolId} and class_id = #{classId};
    </select>

    <select id="getPredictReward" parameterType="SchoolExplorerRewardDTO" resultType="int">
    select ifnull(round((tmp2.sum / 2 * tmp1.rate * (tmp2.set_payment_amount)/tmp2.sum)),0) as predict_reward
    from (
    select class_id, truncate((1-sum(auth_members) / sum(all_members)),3) as rate
    from school_daily_attendance_rate where class_id = #{classId}) as tmp1
    left outer join
    (select class_id,c.set_payment_amount,`sum`
    from class_members as c,
    (select sum(set_payment_amount) as sum
    from class_members
    where (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (class_id = #{classId})
    and (set_day <![CDATA[&]]> #{weekday} != 0)) as ttmp
    where (date_format(now(),'%Y-%m-%d') between start_date and end_date)
    and (class_id = #{classId}) and (set_day <![CDATA[&]]> #{weekday} != 0) and (member_email = #{memberEmail})) as tmp2
    on tmp1.class_id = tmp2.class_id;
    </select>

    <select id="getMyInfo" resultMap="schoolExplorerMyInfo">
    select tmp1.cnt as total_num,tmp2.attendance_num as my_attendance_num,tmp1.all_amount,
    (tmp1.set_payment_amount * tmp2.attendance_num) as my_payment,p.member_point,tmp1.set_day,490 as dust from
    (select set_day,school_id,class_id,cnt,cnt*set_payment_amount as all_amount ,set_payment_amount from class_members
    where school_id = #{schoolId} and class_id = #{classId} and member_email = #{memberEmail}) as tmp1
    left outer join
    (select member_email,school_id,class_id,count(*) as attendance_num from class_auth_log
    where school_id = #{schoolId} and class_id = #{classId} and member_email = #{memberEmail}) as tmp2
    on  tmp1.school_id = tmp2.school_id and tmp1.school_id = tmp2.school_id
    left outer join members_point as p on tmp2.member_email = p.member_email

    </select>
</mapper>

