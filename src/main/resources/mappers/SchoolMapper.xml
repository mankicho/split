<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="component.school.SchoolMapper">

    <!-- test -->
    <resultMap id="testVO" type="component.school.explorer.vo.SchoolTestVO">
        <result property="schoolId" column="school_id"/>
        <result property="sum" column="sum"/>
        <result property="avg" column="avg"/>
        <result property="days" column="days"/>
        <result property="sumAmount" column="sum_amount"/>
        <result property="avgAmount" column="avg_amount"/>
    </resultMap>

    <resultMap id="hashtagsVO" type="component.school.vo.SchoolHashTags">
        <result property="hashtagsId" column="hashtags_id"/>
        <result property="hashTag" column="hashtags"/>
    </resultMap>

    <!-- 나의 탐험단 리스트 -->
    <resultMap id="myExplorersVO" type="component.school.explorer.vo.SchoolMyExplorersVO">
        <result property="schoolId" column="school_id"/>
        <result property="classId" column="class_id"/>
        <result property="schoolName" column="school_name"/>
        <result property="schoolType" column="school_type"/>
        <result property="nickname" column="nickname"/>
        <result property="imagePath" column="image_path"/>
        <result property="todayReservedPerson" column="today_reserved_person"/>
        <collection property="hashTags" resultMap="hashtagsVO"/>
    </resultMap>
    <!-- class_members -->
    <resultMap id="classAuthVO" type="component.school.vo.ClassAuthVO">
        <result property="schoolId" column="school_id"/>
        <result property="classId" column="class_id"/>
        <result property="diff" column="diff"/>
        <result property="setLocation" column="set_location"/>
    </resultMap>
    <!-- 탐험단 - 나의 정보 -->
    <resultMap id="schoolExplorerMyInfo" type="component.school.explorer.vo.SchoolExplorerMyInfo">
        <result property="totalNum" column="total_num"/>
        <result property="myAttendanceNum" column="my_attendance_num"/>
        <result property="allAmount" column="all_amount"/>
        <result property="myPayment" column="my_payment"/>
        <result property="memberPoint" column="member_point"/>
        <result property="date" column="date"/>
        <result property="dust" column="dust"/>
    </resultMap>
    <!-- 탐험단 - 평균 출석률 -->
    <resultMap id="schoolClassAvgAttendanceRateVO" type="component.school.explorer.vo.SchoolClassAvgAttendanceRateVO">
        <result property="authMembers" column="auth_members"/>
        <result property="rate" column="rate"/>
    </resultMap>
    <!-- 탐험단 - 출석유저 리스트 -->
    <resultMap id="schoolExplorerAttendanceListVO" type="component.school.explorer.vo.SchoolExplorerAttendanceListVO">
        <result property="nickname" column="nickname"/>
        <result property="logId" column="log_id"/>
        <result property="num" column="num"/>
        <result property="image" column="image"/>
    </resultMap>
    <!-- 탐험단 - 상금 -->
    <resultMap id="schoolRewardVO" type="component.school.explorer.vo.SchoolRewardVO">
        <result property="schoolId" column="school_id"/>
        <result property="allAccPayment" column="all_acc_payment"/>
        <result property="allDailyPayment" column="all_daily_payment"/>
        <result property="specialAccPayment" column="special_acc_payment"/>
        <result property="specialDailyPayment" column="special_daily_payment"/>
        <result property="allAvgAttendance" column="all_avg_attendance"/>
        <result property="allAccAttendance" column="all_acc_attendance"/>
        <result property="specialAccAttendance" column="special_acc_attendance"/>
        <result property="specialAvgAttendance" column="special_avg_attendance"/>
        <result property="allTodayAmount" column="all_today_amount"/>
        <result property="specialTodayAmount" column="special_today_amount"/>
    </resultMap>
    <!-- get member device token -->
    <resultMap id="memberDeviceVO" type="component.member.vo.MemberDeviceVO">
        <result property="memberEmail" column="member_email"/>
        <result property="deviceType" column="device_type"/>
        <result property="deviceToken" column="device_token"/>
        <result property="schoolName" column="school_name"/>
    </resultMap>

    <!-- class vo -->
    <resultMap id="classVO" type="component.school.vo.ClassVO">
        <result property="classId" column="class_id"/>
        <result property="authTime" column="auth_time"/>
        <result property="allMembers" column="all_members"/>
        <result property="authMembers" column="auth_members"/>
    </resultMap>

    <!-- school hashtag -->
    <resultMap id="hashTags" type="component.school.vo.SchoolHashTags">
        <result property="hashtagsId" column="hashtags_id"/>
        <result property="hashTag" column="hashtags"/>
    </resultMap>

    <!-- school vo -->
    <resultMap id="schoolVO" type="component.school.vo.SchoolVO">
        <result property="schoolId" column="school_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="schoolType" column="school_type"/>
        <result property="memberEmail" column="member_email"/>
        <result property="schoolName" column="school_name"/>
        <result property="setLocation" column="set_location"/>
        <result property="oneLineMessage" column="one_line_message"/>
        <result property="imagePath" column="image_path"/>
        <result property="cumulativeAmount" column="cumulative_amount"/>
        <result property="sumPerson" column="sum_person"/>
        <result property="todayPerson" column="todayPerson"/>
        <result property="period" column="period"/>
        <result property="days" column="days"/>
        <result property="totalPayment" column="total_payment"/>
        <result property="dailyPayment" column="daily_payment"/>
        <collection property="hashTags" resultMap="hashTags"/>
    </resultMap>

    <!-- 학교정보 가져오기 -->
    <select id="getSchools" parameterType="int" resultMap="schoolVO">
        select s.*,datediff(date_format(now(),'%Y-%m-%d'), date_format(found_date,'%Y-%m-%d')) as days,
        ifnull(reservation_num.today_person,0) as today_person, hashtag.hashtags_id, hashtag.hashtags,
        ifnull(acc_attendance.sum_person,0) as sum_person, ifnull(tmp.total_payment,0) as total_payment
        , ifnull(tmp.daily_payment,0) as daily_payment
        from school as s left outer join
        (select * from
        (select school_id,count(*) as today_person -- 오늘 예약자
        from class_members
        where (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (set_day <![CDATA[&]]> #{weekday} !=
        0)
        group by school_id) as
        tmp) as reservation_num on s.school_id = reservation_num.school_id
        left outer join
        (select galaxy_acc_amount.*,galaxy_daily_amount.daily_payment from
        (select school_id,sum(cnt*set_payment_amount) as total_payment from class_members group by school_id) as
        galaxy_acc_amount -- 갤럭시 별 누적보증금
        left outer join
        (select school_id,class_id,ifnull(round(sum(set_payment_amount)/count(*)),0) as daily_payment, count(*) as cnt
        from class_members group by school_id) galaxy_daily_amount
        on galaxy_acc_amount.school_id = galaxy_daily_amount.school_id) as tmp
        on s.school_id = tmp.school_id
        left outer join school_hashtags as hashtag on s.school_id = hashtag.school_id
        left outer join
        (select * from
        (select school_id,count(*) as sum_person from class_auth_log group by school_id) as tmp) as acc_attendance on
        s.school_id = acc_attendance.school_id
        <if test="categoryId != 0">
            where category_id = #{categoryId};
        </if>
    </select>
    <!--    select s.*,datediff(date_format(now(),'%Y-%m-%d'), date_format(found_date,'%Y-%m-%d')) as days,-->
    <!--    ifnull(reservation_num.today_person,0) as today_person, hashtag.hashtags_id, hashtag.hashtags,-->
    <!--    ifnull(acc_attendance.sum_person,0) as sum_person, ifnull(tmp.total_payment,0) as total_payment-->
    <!--    , ifnull(tmp.daily_payment,0) as daily_payment-->
    <!--    from school as s left outer join-->
    <!--    (select * from-->
    <!--    (select school_id,count(*) as today_person-->
    <!--    from class_members-->
    <!--    where (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (set_day <![CDATA[&]]> #{weekday} !=-->
    <!--    0)-->
    <!--    group by school_id) as-->
    <!--    tmp) as reservation_num on s.school_id = reservation_num.school_id-->
    <!--    left outer join-->
    <!--    (-->
    <!--    select school_id,sum(daily_total_payment) as total_payment, (sum(daily_total_payment) / sum(daily_cnt_person))-->
    <!--    as daily_payment from school_class_daily_payment group by school_id) as tmp-->
    <!--    on s.school_id = tmp.school_id-->
    <!--    left outer join school_hashtags as hashtag on s.school_id = hashtag.school_id-->
    <!--    left outer join-->
    <!--    (select * from-->
    <!--    (select school_id,count(*) as sum_person from class_auth_log group by school_id) as tmp) as acc_attendance on-->
    <!--    s.school_id = acc_attendance.school_id-->
    <!--    <if test="categoryId != 0">-->
    <!--        where category_id = #{categoryId};-->
    <!--    </if>-->
    <select id="getSchoolsByPlanetCode" parameterType="string" resultMap="schoolVO">
         select tmp.category_id,tmp.school_id,tmp.school_name,tmp.set_location,tmp.one_line_message,tmp.image_path
        ,tmp.all_members,tttmp.sum_person,tttmp.avg_person,tmp.cumulative_amount,h.hashtags_id,h.hashtags
        from
        (select s.category_id,s.school_id,s.school_name,s.set_location,s.one_line_message,
        s.image_path,s.cumulative_amount,count(s.school_id) as all_members
        From school as s
        left outer join class_members as c on c.school_id = s.school_id group by s.school_id) as tmp -- 학교, 총 재학인원
        left outer join school_hashtags as h on h.school_id = tmp.school_id
        left outer join
        (select school_id,sum(cnt) as sum_person, avg(cnt) as avg_person from (select *,count(*) as cnt from class_auth_log
        group by date_format(auth_date,'%Y-%m-%d') order by school_id) as ttmp group by school_id) as tttmp
        on tmp.school_id = tttmp.school_id-- 해시태그
        where tmp.set_location = #{planetCode}
    </select>
    <!-- mysql 8.0 version 이상부터 -->
    <!--    select school_id,sum(cnt), avg(cnt),dense_rank() over(order by sum(cnt) desc, log_id asc) as acc_rank, dense_rank() over(order by avg(cnt) desc, log_id asc) as avg_rank-->
    <!--    from (select *,count(*) as cnt from class_auth_log group by date_format(auth_date,'%Y-%m-%d') order by school_id) as ttmp group by school_id;-->
    <insert id="registerSchool" parameterType="SchoolDTO">
        INSERT INTO school(category_id,member_email,school_name,set_location,one_line_message) values
        (#{categoryId},#{memberEmail},#{schoolName},#{setLocation},#{oneLineMessage})

        <selectKey keyProperty="schoolId" resultType="Integer" order="AFTER">
            SELECT LAST_INSERT_ID();
        </selectKey>

    </insert>

    <select id="getClasses" parameterType="hashmap" resultMap="classVO">
        select tmp.class_id,tmp.all_members,ifnull(auth_table.auth_members,0) as auth_members from
        (select * ,count(*) as all_members from
        (select *  from class_members as c where school_id = #{schoolId} and date_format(#{selectedDate},'%Y-%m-%d')
        between start_date and end_date and set_day <![CDATA[&]]> #{weekday} != 0) as ttmp -- 선택한 날짜, 유저의 요일에 맞게 가져옴
        group by class_id) as tmp -- 경찰학교 클릭했을떄, class_id 별로 총 학생 수
        left outer join ( -- 오늘 출석한 유저의 총 숫자
        select school_id,class_id,count(*) as auth_members from class_auth_log
        where date_format(auth_date,'%Y-%m-%d') = date_format(#{selectedDate},'%Y-%m-%d') group by school_id,class_id) as auth_table
        on auth_table.school_id = tmp.school_id and auth_table.class_id = tmp.class_id;

    </select>

    <insert id="saveHashTag" parameterType="hashmap">
        INSERT INTO school_hashtags(school_id,hashtags) values
        <foreach collection="list" item="item" separator="," index="idx">
            (#{schoolId},#{item})
        </foreach>
    </insert>

    <insert id="saveSearchKeyword" parameterType="java.util.Map">
        INSERT INTO school_search_log (search_keyword,num) values
        <foreach collection="list" item="item" separator=",">
            (#{item.searchKeyword},#{item.num})
        </foreach>
    </insert>

    <select id="getSchoolsBySearch" parameterType="string" resultMap="schoolVO">
     select s.school_id,s.category_id,s.member_email,s.school_name,s.one_line_message,s.image_path,
     p.planet_name,h.hashtags,amis.all_members_in_school
     from school as s left outer join planet as p
     on s.set_location = p.planet_code left outer join school_hashtags as h on s.school_id = h.school_id
     left outer join
     (select c.school_id,sum(tmp.all_members) as all_members_in_school from class as c left outer join
     (select *,ifnull(count(class_id),0) as all_members from class_members where date_format(now(),'%Y-%m-%d')
     between start_date and end_date group by class_id) as tmp
	 on  c.class_id = tmp.class_id group by school_id) as amis on amis.school_id = s.school_id
     where category_id = #{categoryId} and s.school_name like concat('%',#{keyword},'%');
    </select>

    <insert id="registerClass" parameterType="ClassDTO">
        INSERT INTO class (school_id,weekday_type,auth_time) values
         (#{schoolId},#{weekdayType},time_format(#{authTime},'%H:%i:%s'))
    </insert>

    <insert id="joinClassInOfficial" parameterType="ClassJoinDTO">
            insert into class_members
            (select null,#{schoolId},#{classId},#{setDay},#{memberEmail},#{startDate},#{endDate},
            #{cnt},#{setPaymentAmount} from dual
            where (select count(*) from class_members where (#{startDate} <![CDATA[<]]> end_date and #{endDate}
            <![CDATA[>]]> start_date) and
            member_email = #{memberEmail} and class_id = #{classId}) = 0);
    </insert>

    <insert id="joinClassInNonOfficial" parameterType="ClassJoinDTO">
        insert into class_members
        (select null,#{schoolId},#{classId},#{setDay},#{memberEmail},
        #{startDate},#{endDate},#{cnt},#{setPaymentAmount} from dual
        where (select count(*) from class_members where school_id = #{schoolId}) = 0);
    </insert>
    <select id="getDevicesForPushNotificationOfAttendance" parameterType="int" resultMap="memberDeviceVO">
        select member_email,school_name,device_type,device_token from
        (select m.*,s.school_name,date_format(concat(date_format(now(),'%Y-%m-%d'),' ',c.auth_time),'%Y-%m-%d %H:%i:%s')
        as auth_time,de.device_token,de.device_type
        from class_members as m left outer join school as s on m.school_id = s.school_id
        left outer join class as c on m.class_id = c.class_id
        left outer join member_device as de on m.member_email = de.member_email
        where (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (set_day <![CDATA[&]]> #{weekday} != 0)) as tmp
        where unix_timestamp(now())-unix_timestamp(auth_time) between 0 and 1800;

    </select>

    <insert id="classAuth" parameterType="ClassAuthLogDTO">
            insert into class_auth_log
            select null,#{schoolId},#{classId},#{planetCode},#{memberEmail},now()
            from dual
            where (select count(*) from class_auth_log where school_id = #{schoolId} and class_id = #{classId}
            and member_email = #{memberEmail} and
            date_format(auth_date,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')) = 0;
    </insert>
    <!--    &#45;&#45; INSERT INTO class_auth_log values (null,#{schoolId},#{classId},#{planetCode},#{memberEmail},now())-->


    <select id="getExplorerReward" resultMap="schoolRewardVO" parameterType="int">
   select all_galaxy_att.*,if(special_galaxy_att.special_acc_attendance is null,0,round(special_galaxy_att.special_acc_attendance,2))
    as special_acc_attendance, if(special_galaxy_att.special_avg_attendance is null,0,round(special_galaxy_att.special_avg_attendance,2))
    as special_avg_attendance ,ifnull(special_acc_payment,0) as special_acc_payment, all_acc_payment,ifnull(special_daily_payment,0)
    as special_daily_payment,ifnull(all_daily_payment,0) as all_daily_payment,
    ifnull(all_today_amount,0) as all_today_amount,ifnull(special_today_amount,0) as special_today_amount
    from(
    select #{schoolId} as school_id,sum(all_members) as all_acc_attendance, (round(sum(auth_members)/sum(all_members),2)) as all_avg_attendance
    from school_daily_attendance_rate where class_id = #{classId}) as all_galaxy_att -- 모든 갤럭시의 8시 30분 누적 출석인원, 평균 춣석률, 평균 출석인원
    left outer join
    (select school_id,sum(all_members) as special_acc_attendance,
    (round(auth_members/all_members,2)) as special_avg_attendance from school_daily_attendance_rate
    where school_id = #{schoolId} and class_id = #{classId}) as special_galaxy_att -- 특정 갤럭시의 8시 30분 출석률,누적 출석인원, 평균 춣석률, 평균 출석인원
    on all_galaxy_att.school_id = special_galaxy_att.school_id
    left outer join
    (select school_id,sum(cnt*set_payment_amount) as special_acc_payment from class_members
    where class_id = #{classId} group by school_id) as special_acc_payment -- 특정갤럭시 누적보증금
    on all_galaxy_att.school_id = special_acc_payment.school_id
     left outer join
     (select #{schoolId} as school_id,sum(cnt*set_payment_amount) as all_acc_payment from class_members
     where class_id = #{classId}) as all_acc_payment-- 모든갤럭시 누적 보증금
    on all_galaxy_att.school_id = all_acc_payment.school_id
    left outer join(
    select school_id,sum(set_payment_amount) as special_today_amount
    from class_members where (date_format(now(),'%Y-%m-%d') between start_date and end_date)
    and (set_day <![CDATA[&]]> #{weekday} != 0) and (school_id = #{schoolId} and class_id = #{classId})) as special_today_amount -- 특정갤럭시 오늘 보증금
    on all_galaxy_att.school_id = special_today_amount.school_id
    left outer join
    (select school_id,sum(set_payment_amount) as all_today_amount
    from class_members where date_format(now(),'%Y-%m-%d') between start_date and end_date
    and set_day <![CDATA[&]]> #{weekday} != 0 and (class_id = #{classId})) as all_today_amount -- 모든갤럭시 오늘 보증금
    on all_galaxy_att.school_id = all_today_amount.school_id
    left
     outer join
    (select #{schoolId} as school_id,class_id,ifnull(round(sum(set_payment_amount)/count(*)),0) as all_daily_payment, count(*) as cnt
    from class_members where class_id = #{classId} group by class_id) as all_daily_payment  -- 모든 갤럭시 하루평균
    on all_galaxy_att.school_id = all_daily_payment.school_id
    left outer join
    (select school_id,class_id,ifnull(round(sum(set_payment_amount)/count(*)),0) as special_daily_payment, count(*) as cnt
    from class_members where school_id = #{schoolId} and class_id = #{classId} group by school_id,class_id) as special_daily_payment
    on all_galaxy_att.school_id = special_daily_payment.school_id; -- 특정 갤럭시 하루평균

    </select>

    <select id="getAttendanceList" resultMap="schoolExplorerAttendanceListVO" parameterType="SchoolExplorerDTO">
    select nickname,log_id,num,image from (
    select tmp1.member_email,ifnull(tmp2.log_id,0) as log_id,tmp3.num,
    (select if(log_id is null,not_att_image,att_image)
    from members_image as i where tmp1.member_email = i.member_email) as image
    from (
    select * from class_members where school_id = #{schoolId} and class_id = #{classId} and
    (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (set_day <![CDATA[&]]> #{weekday} != 0)) as tmp1
    left outer join
    (select * from class_auth_log where school_id = #{schoolId} and class_id = #{classId} and
    date_format(auth_date,'%Y-%m-%d') = date_format(now(),'%Y-%m-%d')) as tmp2
    on tmp1.member_email = tmp2.member_email -- 출석한 사람과 안한사람.
    left outer join
    (select member_email,count(*) as num From class_auth_log where school_id = #{schoolId} and class_id = #{classId}
    group by member_email) as tmp3 -- 특정 갤럭시, 특정 시간대의 사람들의 출석회수
    on tmp1.member_email = tmp3.member_email) as tmp left outer join members as m on tmp.member_email = m.email;
    </select>

    <!--
     select (select nickname from members where email = all_users.member_email) as nickname,auth_users.log_id,check_num.num,
      (select if(log_id is null, (select att_image from members_image where member_email = all_users.member_email),
      (select not_att_image
      from members_image where member_email = all_users.member_email))) as image
    from
      (select * from class_members where school_id = #{schoolId} and class_id = #{classId} and
    (date_format(#{selectedDate},'%Y-%m-%d') between start_date and end_date)
    and (set_day <![CDATA[&]]> #{weekday} != 0)) as all_users
    left outer join
    (
    select * from class_auth_log where school_id = #{schoolId} and class_id = #{classId} and
    date_format(auth_date,'%Y-%m-%d') = date_format(#{selectedDate},'%Y-%m-%d')) as auth_users
    on all_users.school_id = auth_users.school_id and all_users.class_id = auth_users.class_id
    and all_users.member_email = auth_users.member_email
    left outer join
    (select member_email,count(*) as num From class_auth_log where school_id = #{schoolId} and class_id = #{classId}
    group by member_email) as check_num
    on all_users.member_email = check_num.member_email
    order by log_id desc
    -->


    <select id="getAttendanceRate" parameterType="int" resultMap="schoolClassAvgAttendanceRateVO">
    select auth_members,truncate(auth_members/all_members,3) as rate
    from school_daily_attendance_rate
    where school_id = #{schoolId} and class_id = #{classId};
    </select>

    <select id="getPredictReward" parameterType="SchoolExplorerRewardDTO" resultType="int">
    select ifnull(truncate(((tmp2.sum / 2) * tmp1.rate * (tmp2.set_payment_amount)/(tmp2.sum*(1-rate))),0),0) as predict_reward
    from (
    select class_id, truncate((1-(sum(auth_members) / sum(all_members))),3) as rate
    from school_daily_attendance_rate where class_id = #{classId}) as tmp1
    left outer join
    (select class_id,c.set_payment_amount,`sum`
    from class_members as c,
    (select sum(set_payment_amount) as sum
    from class_members
    where (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (class_id = #{classId})
    and (set_day <![CDATA[&]]> #{weekday} != 0)) as ttmp
    where (date_format(now(),'%Y-%m-%d') between start_date and end_date)
    and (class_id = #{classId}) and (set_day <![CDATA[&]]> #{weekday} != 0) and (member_email = #{memberEmail})) as tmp2
    on tmp1.class_id = tmp2.class_id;

    </select>


    <select id="getMyInfo" resultMap="schoolExplorerMyInfo">
     select tmp1.set_day,tmp1.cnt as total_num,ifnull(tmp2.attendance_num,0) as my_attendance_num,tmp1.all_amount,ifnull(`sum`,0) as `sum`,
    ifnull((tmp1.set_payment_amount * tmp2.attendance_num),0) as my_payment,ifnull(p.member_point,0) as member_point,
    (select date_format(concat(dummy_date,' ',(select auth_time from class where class_id = c.class_id)),'%Y-%m-%d %H:%i:%s')
    as `date` from class_members as c left outer join dummy_date as d on dummy_date
    between date_format(date_add(now(),interval 1 day),'%Y-%m-%d') and end_date
    where member_email = #{memberEmail} and set_day <![CDATA[&]]> weekday != 0
    and school_id = #{schoolId} and class_id = #{classId} limit 1
    ) as `date`,ifnull(dust,0) as dust
    from
    (select set_day,school_id,class_id,cnt,cnt*set_payment_amount as all_amount ,set_payment_amount from class_members
    where school_id = #{schoolId} and class_id = #{classId} and member_email = #{memberEmail}) as tmp1
    left outer join
    (select member_email,school_id,class_id,count(*) as attendance_num from class_auth_log
    where school_id = #{schoolId} and class_id = #{classId} and member_email = #{memberEmail}) as tmp2
    on  tmp1.school_id = tmp2.school_id and tmp1.school_id = tmp2.school_id
    left outer join (select *,sum(member_point) as `sum` from members_point group by member_email) as p
    on tmp2.member_email = p.member_email
    left outer join members_dust as d on tmp2.member_email = d.member_email
    </select>

    <select id="getMyClassMembers" parameterType="classAuthDTO" resultMap="classAuthVO">
        select school_id,class_id,diff,ifnull(set_location,' ') as set_location from(select *,(unix_timestamp(auth_time)-unix_timestamp(now())) as diff from (select s.set_location,m.*,
        if(m.class_id = 17,date_format(concat(date_format(date_add(now(),interval 1 day),'%Y-%m-%d'),' ',auth_time),'%Y-%m-%d %H:%i:%s'),
        date_format(concat(date_format(now(),'%Y-%m-%d'),' ',auth_time),'%Y-%m-%d %H:%i:%s')) as auth_time
        from class_members as m
        left outer join school as s
        on m.school_id = s.school_Id
        left outer join class as c
        on m.class_id = c.class_id
        where (date_format(now(),'%Y-%m-%d') between start_date and end_date) and (set_day <![CDATA[&]]> #{weekday} != 0) and
        (m.member_email = #{memberEmail})) as t) as p;
    </select>

    <select id="getMyExplorersVO" parameterType="string" resultMap="myExplorersVO">
     select c.school_id,c.class_id,s.school_name,s.school_type,s.image_path,tmp.cnt as today_reserved_person,h.hashtags_id,h.hashtags
    ,(select nickname from members where email = s.member_email) as nickname
     from class_members as c
     left outer join school as s
     on c.school_id = s.school_id
     left outer join
     school_hashtags as h
     on s.school_id = h.school_id
     left outer join
     (select school_id,count(*) as cnt from class_members
     where (set_day <![CDATA[&]]>
     (select weekday from dummy_date where dummy_date = date_format(now(),'%Y-%m-%d')) != 0) and
     (date_Format(now(),'%Y-%m-%d') between start_date and end_date) group by school_id) as tmp
     on c.school_id = tmp.school_id
     where c.member_email = #{memberEmail} order by c.school_id;
    </select>

    <select id="getTest" parameterType="int" resultMap="testVO">
    select school_info.school_id,sum_amount,avg_amount,ifnull(days,0) as days, ifnull(sum,0) as sum,
    ifnull(round((sum/days)),0) as `avg` From (
    select c.school_id,sum(cnt*set_payment_amount) as sum_amount,tmp.avg_amount from class_members as c
    left outer join
    (select school_id,round((sum(set_payment_amount) / count(*)),0) as avg_amount
    from class_members where school_id = #{schoolId}) as tmp
    on c.school_id = tmp.school_id) school_info
    left outer join
	(select l.school_id,datediff(date_format(now(),'%Y-%m-%d'), date_format(found_date,'%Y-%m-%d')) as days
    from school as s left outer join class_auth_log as l
    on l.school_id = s.school_id group by school_id) as days
    on school_info.school_id = days.school_id
    left outer join
	(select l.school_id,count(*) as `sum` from class_auth_log as l group by school_id) as `sum`
    on school_info.school_id = `sum`.school_id;
    </select>
</mapper>

