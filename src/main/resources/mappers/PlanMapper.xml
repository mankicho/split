<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="component.plan.PlanMapper">
    <resultMap id="planVO" type="component.plan.PlanVO">
        <result property="planLogId" column="plan_log_id"/>
        <result property="memberEmail" column="member_email"/>
        <result property="planName" column="plan_name"/>
        <result property="startDate" column="startdate"/>
        <result property="endDate" column="enddate"/>
        <result property="authTime" column="authtime"/>
        <result property="compCondition" column="comp_condition"/>
        <result property="setDay" column="set_day"/>
        <result property="pub" column="pub"/>
        <result property="placeSetting" column="place_setting"/>
        <result property="guildName" column="guild_name"/>
        <result property="tag" column="tag"/>
        <result property="pCode" column="pCode"/>
    </resultMap>

<!--    <resultMap id="memberDeviceVO" type="component.member.vo.MemberDeviceVO">-->
<!--        <result property="memberEmail" column="member_email"/>-->
<!--        <result property="deviceType" column="device_type"/>-->
<!--        <result property="deviceToken" column="device_token"/>-->
<!--    </resultMap>-->

    <insert id="insertPlan" parameterType="PlanDTO">
        INSERT INTO plan(member_email,plan_name,startdate,enddate,authtime,comp_condition,set_day,pub,place_setting,guild_name,tag,pCode)
        SELECT #{memberEmail},#{planName},date_format(#{startDate},'%Y-%m-%d'),date_format(#{endDate},'%Y-%m-%d')
        ,time_format(#{authTime},'%H:%i:%s'),
        #{compCondition},#{setDay},#{pub},#{placeSetting},#{guildName},#{tag},#{pCode} FROM dual

    </insert>

    <delete id="deletePlan" parameterType="int">
        DELETE FROM plan where plan_log_id = #{planLogId}
    </delete>

    <delete id="deleteRangePlan" parameterType="string">
        DELETE FROM plan where member_email = #{email} AND (startDate <![CDATA[<=]]> #{endDate} AND endDate <![CDATA[>=]]> #{startDate})
    </delete>
    <select id="selectByIdAndEmail" resultMap="planVO">
        SELECT * FROM plan where plan_log_id = #{planLogId} AND member_email = #{email}
    </select>
    <select id="selectTodayPlan" resultMap="planVO" parameterType="hashmap">
        SELECT * FROM plan where member_email = #{email} and (now() between startdate and enddate)
        and (#{setDay} <![CDATA[&]]> set_day) != 0
    </select>
    <select id="selectByEmailAndDate" resultMap="planVO">
        SELECT * FROM plan where member_email = #{email} AND date_format(#{authenticateTime},'%Y-%m-%d') between startdate and enddate;
    </select>
    <select id="selectsAllPlans" parameterType="string" resultMap="planVO">
        SELECT * FROM plan where member_email = #{email}
    </select>

    <select id="selectsAllEmailOfPlans" parameterType="int" resultType="string">
        select member_email from plan_members where plan_log_id = #{planLogId}
    </select>

    <select id="selectsAllPlansAtCertainZone" parameterType="string" resultType="planVO">
         select * from plan where place_setting = #{placeSetting};
    </select>

    <select id="getPlansBySearching" parameterType="string" resultType="planVO">
        select plan_log_id as planLogId,member_email as memberEmail,plan_name as planName,
         startdate as startDate, enddate as endDate, authtime as authTime, comp_condition as compCondition,
         set_day as setDay, pub,place_setting as placeSetting, guild_name as guildName, tag, pCode
          from plan where plan_name like concat('%',#{key},'%') or
         exists (select plan_log_id from plan_hashtags where hashtag like concat('%',#{key},'%'));
    </select>

    <select id="getPlansByOrdering" resultType="planVO" parameterType="hashmap">
        select plan_log_id as planLogId, member_email as memberEmail, plan_name as planName,
        startdate,enddate,authtime,comp_condition as compCondition, set_day as setDay,pub,
        place_setting as placeSetting, guild_name as guildName, tag,pcode,
        (select count(*) from plan_members as m
        where m.plan_log_Id = p.plan_log_id) as tmp from plan as p
        <choose>
            <when test="type == 0">
                where date_format(now(),'%Y-%m-%d') <![CDATA[<=]]> startdate
            </when>
            <otherwise>
                where date_format(now(),'%Y-%m-%d') <![CDATA[>]]> startdate
            </otherwise>
        </choose>
        <choose>
            <when test="col == 1">
                order by tmp
            </when>
            <otherwise>
                order by startdate
            </otherwise>
        </choose>
    </select>

<!--    <select id="getDevicesForPushNotificationOfAttendance" parameterType="int" resultMap="memberDeviceVO">-->
<!--        select * from member_device where exists (-->
<!--        select member_email from plan where (now() between startdate and enddate) and ((set_day <![CDATA[&]]> #{weekday}) != 0));-->
<!--    </select>-->

    <select id="getPlanVOByPlanLogId" parameterType="int" resultMap="planVO">
        select * from plan where plan_log_id = #{planLogId}
    </select>
</mapper>
