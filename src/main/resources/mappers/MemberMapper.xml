<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="component.member.MemberMapper">
    <resultMap id="authMap" type="component.member.AuthDTO">
        <result property="memberEmail" column="member_email"/>
        <result property="auth" column="auth"/>
    </resultMap>

    <resultMap id="memberMap" type="component.member.MemberVO">
        <result property="email" column="email"/>
        <result property="pw" column="pw"/>
        <result property="phoneNumber" column="phone_num"/>
        <result property="sex" column="sex"/>
        <result property="bornTime" column="born_time"/>
        <result property="nickname" column="nickname"/>
        <collection property="authList" resultMap="authMap"/>
    </resultMap>

    <select id="selects" resultMap="memberMap" parameterType="string">
        SELECT m.email,m.pw,m.phone_num,m.sex,m.born_time,m.nickname,a.member_email,a.auth
        from members as m left outer join members_auth as a on m.email = a.member_email
        <where>
            <if test="value != null">
                m.email = #{value}
            </if>
        </where>
    </select>

    <insert id="registerMember" parameterType="MemberDTO">
        INSERT INTO members(email,pw,phone_num,sex,born_time,nickname)
        values (#{email},#{pw},#{phoneNumber},#{sex},#{bornTime},#{nickname})
    </insert>

    <delete id="deleteMember" parameterType="string">
        DELETE FROM members where email = #{email}
    </delete>

    <select id="isExistNickname" resultType="string" parameterType="string">
        SELECT nickname from members where nickname = #{nickname}
    </select>

    <select id="isExistEmail" resultType="string" parameterType="string">
        SELECT email from members where email = #{email}
    </select>

    <insert id="tmpDeleteMember" parameterType="string">
        INSERT into delete_members(email,delete_date) values (#{email},now())
    </insert>

    <delete id="restoreDeletedMember" parameterType="string">
        DELETE FROM delete_members where email = #{email}
    </delete>

    <select id="isExistPhoneNumber" parameterType="string" resultType="string">
        SELECT phone_num from members where phone_num = #{pNum}
    </select>

    <select id="findEmail" parameterType="string" resultType="string">
        SELECT email from members where phone_num = #{pNum}
    </select>

    <select id="selectsByTmpInfo" parameterType="string" resultType="MemberTmpInfoDTO">
        SELECT email,pw FROM member_tmpinfo where email = #{email}
    </select>

    <insert id="generateTmpPassword" parameterType="hashmap">
        INSERT INTO member_tmpinfo(email,pw) values (#{valEmail},#{valPw}) on duplicate key update email = #{upEmail}, pw=#{upPw}
    </insert>

    <update id="updatePassword" parameterType="string">
        UPDATE members set pw = #{pw} where email = #{email}
    </update>

    <insert id="insertPolicy" parameterType="hashmap">
        INSERT INTO members_policy values (#{email},#{po1},#{po2},#{po3},#{po4})
    </insert>

    <resultMap id="members_timer" type="component.member.MemberTimer">
        <result property="email" column="email"/>
        <result property="focusTime" column="focus_time"/>
        <result property="focusDate" column="focus_date"/>
    </resultMap>
    <select id="selectTimer" parameterType="string" resultMap="members_timer">
        select * from members_timer where email = #{email} order by focus_date desc limit 7
    </select>

</mapper>
